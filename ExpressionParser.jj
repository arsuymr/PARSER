options {
  STATIC = false;
  LOOKAHEAD = 1; // Utilisation d'un lookahead de 1
}

PARSER_BEGIN(Parser)

public class Parser {
  public static void main(String[] args) throws ParseException {
    Parser parser = new Parser(System.in);
    parser.parse();
    System.out.println("Parsing completed successfully.");
  }
}

PARSER_END(Parser)

TOKEN : { < ID : ["A"-"Z"] (["a"-"z","0"-"9"])* "_" > }
TOKEN : { <DOLLAR : : ["+", "*", "/"] > }        // Les opérateurs : +, *, /
TOKEN : { <EQ : : [">", "<"] > }                 // Les opérateurs : >, <
TOKEN : { <AT :  ["(", ")"] > }             // Les délimiteurs : ( )
TOKEN : { <AND : : ["{", "}"] > }           // Les délimiteurs : { }
TOKEN : { <HASH : "#"> }                   // Le délimiteur : #

SKIP : { " " | "\t" | "\n" | "\r" }  // Pour ignorer les espaces blancs, tabulations et nouvelles lignes

void parse() : {}
{
    E()
}

void E() : {}
{
    T() <HASH>
}

void T() : {}
{
    S() 
    | {}
}

void S() : {}
{
    A() <AT> B() 
}

void A() : {}
{
  <EQ>  F() 
}

void G() : {}
{
    <DOLLAR> X() 
    | <AND> A() <EQ> F() 
}

void F() : {}
{
    X() 
}

void X() : {}
{
    {}
}

void B() : {}
{
    <EQ> L() 
    | <ID> K() 
}

void L() : {}
{
    S() X() <ID> Y() 
}

void K() : {}
{
    Y() 
 
}

void Y() : {}
{
  {}
}
