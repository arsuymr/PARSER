PARSER_BEGIN(ExpressionParser)

public class ExpressionParser {
    public static void main(String args[]) throws ParseException {
        ExpressionParser parser = new ExpressionParser(System.in);
        try {
            parser.S();
            System.out.println("Syntaxe correcte !");
        } catch (ParseException e) {
            System.out.println("Erreur de syntaxe : " + e.getMessage());
        }
    }
}

PARSER_END(ExpressionParser)

SKIP : {
    " "
|   "\t"
|   "\n"
|   "\r"
}

TOKEN : {
    < ID: ["A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* "*" >
|   < PLUS: "+" >
|   < MULT: "*" >
|   < DIV: "/" >
|   < GT: ">" >
|   < LT: "<" >
|   < LPAREN: "(" >
|   < RPAREN: ")" >
|   < LBRACE: "{" >
|   < RBRACE: "}" >
|   < EQUALS: "=" >
|   < AT: "@" >
|   < AND: "&" >
|   < DOLLAR: "$" >
}

void S() : {}
{
    X() <AT> Y() 
|   Y() <AND> X() 
|   /* epsilon */ {}
}

void X() : {}
{
    Y() (<DOLLAR> | <EQUALS> S())
}

void Y() : {}
{
    <ID> S() 
|   <ID>
}