/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.io.*;
import java.util.*;

public class Parser implements ParserConstants {
  private PrintWriter astWriter;
  private int indentLevel = 0;

  public void initASTWriter(String outputFile) {
    try {
      astWriter = new PrintWriter(new FileWriter(outputFile));
    } catch (IOException e) {
      System.err.println("Erreur lors de la cr\u00e9ation du fichier AST: " + e.getMessage());
      astWriter = new PrintWriter(System.out);
    }
  }

  private void writeNode(String nodeName) {
    if (astWriter == null) {
      astWriter = new PrintWriter(System.out);
    }
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < indentLevel; i++) {
      sb.append("  ");
    }
    sb.append(nodeName);
    astWriter.println(sb.toString());
    astWriter.flush();
  }

  private void writeTerminal(String tokenName) {
    if (astWriter == null) {
      astWriter = new PrintWriter(System.out);
    }
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < indentLevel; i++) {
      sb.append("  ");
    }
    // Conversion des noms de tokens avec if-else
    String displayName = tokenName;
    if (tokenName.equals("ID")) {
      displayName = "Id";
    } else if (tokenName.equals("DOLLAR")) {
      displayName = "$";
    } else if (tokenName.equals("EQ")) {
      displayName = "=";
    } else if (tokenName.equals("AT")) {
      displayName = "@";
    } else if (tokenName.equals("AND")) {
      displayName = "&";
    } else if (tokenName.equals("HASH")) {
      displayName = "#";
    }
    sb.append(displayName);
    astWriter.println(sb.toString());
    astWriter.flush();
  }

  public void closeASTWriter() {
    if (astWriter != null) {
      astWriter.close();
    }
  }

  final public void parse() throws ParseException {
    writeNode("Programme");
    indentLevel++;
    E();
    indentLevel--;
  }

  final public void E() throws ParseException {
    writeNode("E");
    indentLevel++;
    T();
    writeTerminal("HASH");
    jj_consume_token(0);
    indentLevel--;
  }

  final public void T() throws ParseException {
    writeNode("T");
    indentLevel++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      S();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
    indentLevel--;
  }

  final public void S() throws ParseException {
    writeNode("S");
    indentLevel++;
    A();
    writeTerminal("AT");
    jj_consume_token(AT);
    B();
    indentLevel--;
  }

  final public void A() throws ParseException {
    writeNode("A");
    indentLevel++;
    writeTerminal("EQ");
    jj_consume_token(EQ);
    F();
    indentLevel--;
  }

  final public void G() throws ParseException {
    writeNode("G");
    indentLevel++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      writeTerminal("DOLLAR");
      jj_consume_token(DOLLAR);
      X();
      break;
    case AND:
      writeTerminal("AND");
      jj_consume_token(AND);
      A();
      writeTerminal("EQ");
      jj_consume_token(EQ);
      F();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    indentLevel--;
  }

  final public void F() throws ParseException {
    writeNode("F");
    indentLevel++;
    X();
    indentLevel--;
  }

  final public void X() throws ParseException {
    writeNode("X");
    indentLevel++;

    indentLevel--;
  }

  final public void B() throws ParseException {
    writeNode("B");
    indentLevel++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      writeTerminal("EQ");
      jj_consume_token(EQ);
      L();
      break;
    case ID:
      writeTerminal("ID");
      jj_consume_token(ID);
      K();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    indentLevel--;
  }

  final public void L() throws ParseException {
    writeNode("L");
    indentLevel++;
    S();
    X();
    writeTerminal("ID");
    jj_consume_token(ID);
    Y();
    indentLevel--;
  }

  final public void K() throws ParseException {
    writeNode("K");
    indentLevel++;
    Y();
    indentLevel--;
  }

  final public void Y() throws ParseException {
    writeNode("Y");
    indentLevel++;

    indentLevel--;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8,0x24,0xa,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[10];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 10; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
