/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.io.*;
import java.util.*;

public class Parser implements ParserConstants {
  private PrintWriter astWriter;
  private int indentLevel = 0;

  public void initASTWriter(String outputFile) {
    try {
      astWriter = new PrintWriter(new FileWriter(outputFile));
    } catch (IOException e) {
      System.err.println("Erreur lors de la cr\u00e9ation du fichier AST: " + e.getMessage());
      astWriter = new PrintWriter(System.out);
    }
  }

  private void writeNode(String nodeName) {
    if (astWriter == null) {
      astWriter = new PrintWriter(System.out);
    }
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < indentLevel; i++) {
      sb.append("  ");
    }
    sb.append(nodeName);
    astWriter.println(sb.toString());
    astWriter.flush();
  }

  private void writeTerminal(String tokenName) {
    if (astWriter == null) {
      astWriter = new PrintWriter(System.out);
    }
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < indentLevel; i++) {
      sb.append("  ");
    }
    // Conversion des noms de tokens avec if-else
    String displayName = tokenName;
    if (tokenName.equals("ID")) {
      displayName = "Id";
    } else if (tokenName.equals("DOLLAR")) {
      displayName = "$";
    } else if (tokenName.equals("EQ")) {
      displayName = "=";
    } else if (tokenName.equals("AT")) {
      displayName = "@";
    } else if (tokenName.equals("AND")) {
      displayName = "&";
    } else if (tokenName.equals("HASH")) {
      displayName = "#";
    }
    sb.append(displayName);
    astWriter.println(sb.toString());
    astWriter.flush();
  }

  public void closeASTWriter() {
    if (astWriter != null) {
      astWriter.close();
    }
  }

  final public void parse() throws ParseException {
    writeNode("Programme");
    indentLevel++;
    E();
    indentLevel--;
  }

  final public void E() throws ParseException {
    writeNode("E");
    indentLevel++;
    T();
    writeTerminal("HASH");
    jj_consume_token(0);
    indentLevel--;
  }

  final public void T() throws ParseException {
    writeNode("T");
    indentLevel++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case EQ:
      S();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
    indentLevel--;
  }

  final public void S() throws ParseException {
    if (jj_2_1(2147483647)) {
    writeNode("S");
    indentLevel++;
      A();
        writeTerminal("AT");
      jj_consume_token(AT);
      B();
    indentLevel--;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case EQ:
        B();
        writeTerminal("AND");
        jj_consume_token(AND);
        A();
    writeNode("S");
    indentLevel++;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void A() throws ParseException {
    if (jj_2_2(2147483647)) {
    writeNode("A");
    indentLevel++;
      jj_consume_token(EQ);
      F();
    writeTerminal("EQ");
    indentLevel--;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case EQ:
        B();
        G();
    writeNode("A");
    indentLevel++;
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void G() throws ParseException {
    writeNode("G");
    indentLevel++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      writeTerminal("DOLLAR");
      jj_consume_token(DOLLAR);
      X();
      break;
    case AND:
      writeTerminal("AND");
      jj_consume_token(AND);
      A();
      writeTerminal("EQ");
      jj_consume_token(EQ);
      F();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    indentLevel--;
  }

  final public void F() throws ParseException {
    writeNode("F");
    indentLevel++;
    X();
    indentLevel--;
  }

  final public void X() throws ParseException {
    if (jj_2_3(2147483647)) {
    writeNode("X");
    indentLevel++;
      jj_consume_token(AT);
      B();
      jj_consume_token(EQ);
      F();
    writeTerminal("AT");
    writeTerminal("EQ");
    indentLevel--;
    } else {
    writeNode("X");
    indentLevel++;
    indentLevel--;
    }
  }

  final public void B() throws ParseException {
    writeNode("B");
    indentLevel++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      writeTerminal("EQ");
      jj_consume_token(EQ);
      L();
      break;
    case ID:
      writeTerminal("ID");
      jj_consume_token(ID);
      K();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    indentLevel--;
  }

  final public void L() throws ParseException {
    if (jj_2_4(2147483647)) {
    writeNode("L");
    indentLevel++;
      S();
      X();
           writeTerminal("ID");
      jj_consume_token(ID);
      Y();
    indentLevel--;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case AT:
        X();
        writeTerminal("ID");
        jj_consume_token(ID);
        Y();
    writeNode("L");
    indentLevel++;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void K() throws ParseException {
    writeNode("K");
    indentLevel++;
    Y();
    indentLevel--;
  }

  final public void Y() throws ParseException {
    writeNode("Y");
    indentLevel++;
    if (jj_2_5(2147483647)) {
      writeTerminal("ID");
      writeNode("Y");
      indentLevel++;
      X();
      jj_consume_token(ID);
      Y();

    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case EQ:
        A();
        jj_consume_token(EQ);
        L();
      writeTerminal("EQ");
      writeNode("Y");
      indentLevel++;
        break;
      default:
        jj_la1[6] = jj_gen;

      }
    }
    indentLevel--;
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_14() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_1()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    return false;
  }

  private boolean jj_3R_19() {
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_1()) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_1()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_2()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    }
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_4()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa,0xa,0xa,0x24,0xa,0x12,0xa,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[10];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 10; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
